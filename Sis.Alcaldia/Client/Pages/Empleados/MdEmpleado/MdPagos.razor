@inject IColaboradoresServicio _empleadoServicio
@inject ISnackbar _snackBar

<MudDialog Style="width:400px">

    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll" Class="m-0 p-0">

            <EditForm Model="@_pagos">

                <MudDatePicker @bind-Value="@_pagos.FechaPago" Class="mb-3"
                              Label="Fecha De Pago" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge"
                              For="@(() => _pagos.FechaPago)" />

                <MudNumericField @bind-Value="@_pagos.MetodoPago" Class="mb-3"
                              Label="Correo" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Email"
                              For="@(() => _pagos.MetodoPago)" />

                <MudNumericField @bind-Value="@_pagos.Descuentos" Class="mb-3"
                                Label="Correo" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Email"
                                For="@(() => _pagos.Descuentos)" />

                <MudNumericField @bind-Value="@_pagos.Bonos" Class="mb-3"
                                 Label="Correo" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Email"
                                 For="@(() => _pagos.Bonos)" />

                <MudTextField @bind-Value="@_pagos.Detalle" Class="mb-3"
                              Label="Correo" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Email"
                              For="@(() => _pagos.Detalle)" />

            </EditForm>

        </MudContainer>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Guardar">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public PagosDTO _pagos { get; set; } = new PagosDTO();

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
  
    }


    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async Task Guardar()
    {
        if (string.IsNullOrWhiteSpace(_pagos.MetodoPago) || string.IsNullOrWhiteSpace(_pagos.Descuentos.ToString()) || string.IsNullOrWhiteSpace(_pagos.Bonos.ToString()))
            return;

        string _mensaje = "";
        bool _resultado;

        if (_pagos.Idpago != 0)
        {
            _resultado = await _empleadoServicio.EditarPagos(_pagos);
            _mensaje = "Colaborador fue modificado";
        }
        else
        {
            var response = await _empleadoServicio.CrearPagos(_pagos);
            _resultado = response.status;
            _mensaje = "Colaborador fue creado";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 1000);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 1000);

    }
}
